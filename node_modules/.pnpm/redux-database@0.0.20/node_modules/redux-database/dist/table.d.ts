import { Row, RowIdentififying, RowInsertionList } from './util';
import { InsertAction, UpdateAction, DeleteAction, CommitContextAction, RevertContextAction, UpsertAction, TruncateAction, ResetAction } from './actions';
export interface DataTable<T> {
    byId: {
        [id: string]: T;
    };
    ids: string[];
}
export interface ContextChanges<T> {
    byId: {
        [id: string]: Partial<T>;
    };
    deletedIds: string[];
    newIds: string[];
}
export interface ObjectChanges<T> {
    id: string;
    changes?: Partial<T>;
    deleted: boolean;
    inserted: boolean;
}
export declare class Table<T extends Row> {
    private data;
    private key;
    private context?;
    private contextChanges?;
    constructor(data: DataTable<T>, key: string, options?: {
        context?: string;
        contextChanges?: Array<ContextChanges<T>>;
    });
    get name(): string;
    find(id: string): T | undefined;
    get all(): T[];
    get first(): T | undefined;
    get last(): T | undefined;
    get length(): number;
    where(query: ((value: T) => boolean) | Partial<T>): T[];
    insert(records: RowInsertionList<T>): InsertAction;
    upsert(records: RowInsertionList<T>): UpsertAction;
    update(id: RowIdentififying, values: Partial<T>): UpdateAction;
    delete(id: RowIdentififying): DeleteAction;
    truncate(): TruncateAction;
    reset(): ResetAction;
    commit(ids?: RowIdentififying): CommitContextAction;
    revert(ids?: RowIdentififying): RevertContextAction;
    get changes(): Array<ObjectChanges<T>>;
    changesFor(id: string): ObjectChanges<T> | undefined;
    get ids(): string[];
    private get newIds();
    private get deletedIds();
}
