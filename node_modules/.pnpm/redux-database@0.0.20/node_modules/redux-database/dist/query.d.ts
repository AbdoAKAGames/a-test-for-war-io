import { DB, RowKeyOf, RowType } from './db';
import { StateDefining } from './db';
import { Table } from './table';
import { Row, SortDescriptor } from './util';
export declare class Query<State extends StateDefining, TableKey extends RowKeyOf<State>, T extends Row> {
    private readonly db;
    private readonly table;
    constructor(db: DB<State>, table: Table<T>);
    get first(): T | undefined;
    get last(): T | undefined;
    find(id: string): T | undefined;
    get all(): T[];
    get length(): number;
    select<K extends keyof T>(...fields: K[]): Query<State, TableKey, Pick<T, K> & Row>;
    where(query: ((value: T) => boolean) | Partial<T>): Query<State, TableKey, T>;
    limit(amount: number): Query<State, TableKey, T>;
    offset(amount: number): Query<State, TableKey, T>;
    orderBy(sortDescriptor: SortDescriptor<T>): Query<State, TableKey, T>;
    embed<Key extends string, SecondaryTable extends RowKeyOf<State>, JoinKey extends keyof T, Embed = RowType<State, SecondaryTable>>(key: Key, table: SecondaryTable, source: JoinKey): Query<State, TableKey, T & Record<Key, undefined extends T[JoinKey] ? Embed | undefined : Embed>>;
    embedMulti<Key extends string, SecondaryTable extends RowKeyOf<State>, JoinKey extends keyof T, Embed = RowType<State, SecondaryTable>>(key: Key, table: SecondaryTable, source: JoinKey): Query<State, TableKey, T & Record<Key, Embed[]>>;
    private queryFromResults;
}
