import { Row, RowIdentififying, RowInsertionList } from './util';
import { Table, ObjectChanges } from './table';
import { DBDispatch } from './actions';
export declare class MutableTable<T extends Row> {
    underlyingTable: Table<T>;
    private dispatch;
    constructor(table: Table<T>, dispatch: DBDispatch);
    find(id: string): T | undefined;
    get all(): T[];
    get first(): T | undefined;
    get last(): T | undefined;
    get changes(): Array<ObjectChanges<T>>;
    get ids(): string[];
    get length(): number;
    changesFor(id: string): ObjectChanges<T> | undefined;
    where(query: ((value: T) => boolean) | Partial<T>): T[];
    insert(records: RowInsertionList<T>): void;
    upsert(records: RowInsertionList<T>): void;
    update(id: RowIdentififying, values: Partial<T>): void;
    delete(id: RowIdentififying): void;
    commit(ids?: RowIdentififying): void;
    revert(ids?: RowIdentififying): void;
    truncate(): void;
}
