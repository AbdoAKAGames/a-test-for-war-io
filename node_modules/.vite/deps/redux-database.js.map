{
  "version": 3,
  "sources": ["../../.pnpm/redux-database@0.0.20/node_modules/redux-database/dist/index.esm.js"],
  "sourcesContent": ["var emptyTable = Object.freeze({\n  byId: {},\n  ids: []\n});\nfunction guid() {\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n  }\n\n  return [s4() + s4(), s4(), s4(), s4(), s4() + s4() + s4()].join('-');\n}\nfunction byId(records) {\n  var map = {};\n  records.forEach(e => map[e.id] = e);\n  return map;\n}\nfunction pick(obj) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  var ret = {};\n\n  for (var _len = arguments.length, keys = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    keys[_key - 1] = arguments[_key];\n  }\n\n  keys.forEach(key => {\n    ret[key] = obj[key];\n  });\n  return ret;\n}\nfunction except(object, keys) {\n  var newObject = {};\n  var key;\n\n  for (key in object) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (!keys.includes(key)) {\n      newObject[key] = object[key];\n    }\n  }\n\n  return newObject;\n}\nfunction extractIds(object) {\n  if (object === undefined) {\n    throw new Error('Trying to insert/update record which was not saved before');\n  }\n\n  var test;\n\n  if (!(object instanceof Array)) {\n    test = [object];\n  } else {\n    test = object;\n  }\n\n  return test.map(e => e['id'] || e);\n}\nfunction applyId(record) {\n  var copy = Object.assign({}, record);\n\n  if (!copy.id) {\n    copy.id = guid();\n  }\n\n  return copy;\n}\nfunction extractParentContext(context) {\n  var index = context.lastIndexOf('.');\n\n  if (index > 1) {\n    return context.substr(0, index);\n  }\n\n  return;\n}\nfunction flatten(items) {\n  return items.reduce((array, item) => array.concat(item), []);\n}\nfunction compact(items) {\n  return items.filter(e => e !== undefined);\n}\nfunction removeByValue(array, element) {\n  var index = array.indexOf(element);\n\n  if (index !== -1) {\n    array.splice(index, 1);\n  }\n}\nfunction formatResultToTableData(results) {\n  var ids = [];\n  var byId = {};\n\n  for (var result of results) {\n    ids.push(result.id);\n    byId[result.id] = result;\n  }\n\n  return {\n    ids,\n    byId\n  };\n}\nfunction orderBy(elements, key) {\n  var order = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'asc';\n  return elements.concat().sort((a, b) => {\n    if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\n      return 0;\n    }\n\n    var varA = a[key];\n    var varB = b[key];\n    var comparison = 0;\n\n    if (varA > varB) {\n      comparison = 1;\n    } else if (varA < varB) {\n      comparison = -1;\n    }\n\n    return order === 'desc' ? comparison * -1 : comparison;\n  });\n}\nfunction order(elements, sortDescriptor) {\n  if (typeof sortDescriptor === 'string') {\n    elements = orderBy(elements, sortDescriptor);\n  } else {\n    Object.keys(sortDescriptor).forEach(key => {\n      elements = orderBy(elements, key, sortDescriptor[key]);\n    });\n  }\n\n  return elements;\n}\nfunction deepEqual(a, b) {\n  // even though it seems counterintuitive, stringify is extremely fast and even faster than most js\n  // implementations of deep equal.\n  return JSON.stringify(a) === JSON.stringify(b);\n}\n\nclass Table {\n  constructor(data, key) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.data = data;\n    this.key = key;\n    this.context = options.context;\n    this.contextChanges = options.contextChanges;\n  }\n\n  get name() {\n    return this.key;\n  }\n\n  find(id) {\n    if (!this.ids.includes(id)) {\n      return;\n    }\n\n    var changes = this.contextChanges && this.contextChanges.map(e => e.byId[id]);\n    var object = this.data.byId[id];\n    return changes ? Object.assign({}, object, ...changes) : object;\n  }\n\n  get all() {\n    return this.ids.map(id => this.find(id));\n  }\n\n  get first() {\n    return this.find(this.ids[0]);\n  }\n\n  get last() {\n    return this.find(this.ids[this.ids.length - 1]);\n  }\n\n  get length() {\n    return this.ids.length;\n  }\n\n  where(query) {\n    if (typeof query === 'function') {\n      return this.all.filter(query);\n    } else {\n      return this.all.filter(e => {\n        for (var key of Object.keys(query)) {\n          if (e[key] !== query[key]) {\n            return false;\n          }\n        }\n\n        return true;\n      });\n    }\n  }\n\n  insert(records) {\n    var newRecords = records instanceof Array ? records : [records];\n    var insertedRecords = newRecords.map(e => applyId(e));\n    return {\n      type: 'INSERT_RECORD',\n      payload: {\n        key: this.key,\n        context: this.context,\n        ids: insertedRecords.map(e => e.id),\n        data: insertedRecords\n      }\n    };\n  }\n\n  upsert(records) {\n    var newRecords = records instanceof Array ? records : [records];\n    var insertedRecords = newRecords.map(e => applyId(e));\n    return {\n      type: 'UPSERT_RECORD',\n      payload: {\n        key: this.key,\n        context: this.context,\n        ids: insertedRecords.map(e => e.id),\n        data: insertedRecords\n      }\n    };\n  }\n\n  update(id, values) {\n    return {\n      type: 'UPDATE_RECORD',\n      payload: {\n        key: this.key,\n        context: this.context,\n        ids: extractIds(id),\n        data: values\n      }\n    };\n  }\n\n  delete(id) {\n    return {\n      type: 'DELETE_RECORD',\n      payload: {\n        key: this.key,\n        context: this.context,\n        ids: extractIds(id)\n      }\n    };\n  }\n\n  truncate() {\n    return {\n      type: 'TRUNCATE',\n      payload: {\n        type: 'table',\n        key: this.key\n      }\n    };\n  }\n\n  reset() {\n    return {\n      type: 'RESET',\n      payload: {\n        type: 'table',\n        key: this.key\n      }\n    };\n  }\n\n  commit(ids) {\n    if (!this.context) {\n      throw new Error('Called commit on a root context.');\n    }\n\n    return {\n      type: 'COMMIT_CONTEXT',\n      payload: {\n        context: this.context,\n        table: this.key,\n        ids: ids ? extractIds(ids) : undefined\n      }\n    };\n  }\n\n  revert(ids) {\n    if (!this.context) {\n      throw new Error('Called commit on a root context.');\n    }\n\n    return {\n      type: 'REVERT_CONTEXT',\n      payload: {\n        context: this.context,\n        table: this.key,\n        ids: ids ? extractIds(ids) : undefined\n      }\n    };\n  }\n\n  get changes() {\n    var changes = compact([...this.ids, ...this.deletedIds].map(id => this.changesFor(id)));\n    return changes.filter(e => e.deleted || e.inserted || e.changes);\n  }\n\n  changesFor(id) {\n    if (!this.data.ids.includes(id) && !this.newIds.includes(id)) {\n      return;\n    }\n\n    var deleted = this.deletedIds.includes(id);\n    var inserted = this.newIds.includes(id);\n    var changeSets = (this.contextChanges || []).map(e => e.byId[id]).filter(Boolean);\n    var changes = changeSets.length > 0 ? changeSets.reduce((obj, change) => Object.assign({}, obj, change), {}) : undefined;\n    return {\n      id,\n      deleted,\n      inserted,\n      changes\n    };\n  }\n\n  get ids() {\n    var deletedIds = this.deletedIds;\n    return this.data.ids.concat(this.newIds).filter(id => !deletedIds.includes(id));\n  }\n\n  get newIds() {\n    return flatten((this.contextChanges || []).map(e => e.newIds));\n  }\n\n  get deletedIds() {\n    return flatten((this.contextChanges || []).map(e => e.deletedIds));\n  }\n\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nclass Query {\n  constructor(db, table) {\n    this.db = db;\n    this.table = table;\n  }\n\n  get first() {\n    return this.table.first;\n  }\n\n  get last() {\n    return this.table.last;\n  }\n\n  find(id) {\n    return this.table.find(id);\n  }\n\n  get all() {\n    return this.table.all;\n  }\n\n  get length() {\n    return this.table.ids.length;\n  }\n\n  select() {\n    for (var _len = arguments.length, fields = new Array(_len), _key = 0; _key < _len; _key++) {\n      fields[_key] = arguments[_key];\n    }\n\n    var results = this.all.map(object => {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n      // @ts-ignore\n      return pick(object, 'id', ...fields);\n    });\n    return this.queryFromResults(results);\n  }\n\n  where(query) {\n    var results = this.table.where(query);\n    return this.queryFromResults(results);\n  }\n\n  limit(amount) {\n    var results = this.all.slice(0, amount);\n    return this.queryFromResults(results);\n  }\n\n  offset(amount) {\n    var results = this.all.slice(amount);\n    return this.queryFromResults(results);\n  }\n\n  orderBy(sortDescriptor) {\n    var results = order(this.table.all, sortDescriptor);\n    return this.queryFromResults(results);\n  }\n\n  embed(key, table, source) {\n    var results = this.all.map(e => {\n      var embed = e[source] ? this.db.table(table).find(e[source]) : undefined;\n      return _objectSpread2(_objectSpread2({}, e), {}, {\n        [key]: embed\n      });\n    }); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    return this.queryFromResults(results);\n  }\n\n  embedMulti(key, table, source) {\n    var results = this.all.map(e => {\n      var ids = e[source] || [];\n      var embed = compact(ids.map(id => this.db.table(table).find(id)));\n      return _objectSpread2(_objectSpread2({}, e), {}, {\n        [key]: embed\n      });\n    }); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    return this.queryFromResults(results);\n  }\n\n  queryFromResults(results) {\n    var table = new Table(formatResultToTableData(results), this.table.name);\n    return new Query(this.db, table);\n  }\n\n}\n\n/**\n * `DB` is a snapshot of your current database state. It helps you reading data via [[`get`]], [[`table`]] and [[`query`]].\n *\n * ```ts\n * const db = new DB(state);\n *\n * db.get('enableAwesomeThing'); // true\n *\n * const things = db.table('things'); // if things is not defined, you would get an error here\n * things.all; // returns Thing[]\n * things.find('12'); // find by id\n * things.where({ name: 'tool' }); // simple equality based where queries\n * things.where(thing => thing.name.length == 4); // function based where queries\n * ```\n *\n * @typeParam State The state type of your database schema.\n *\n */\nclass DB {\n  /**\n   * Create a snapshot from the given state. Can either be used in conjunction with redux or implicitly\n   * by calling `mutableDB.snapshot`.\n   */\n  constructor(state) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.state = state;\n    this.currentContext = options.context;\n  }\n  /**\n   * Get the value from the key-value store.\n   *\n   * @param name A key of your key-value schema\n   * @returns the value of the supplied key, `undefined` if no value is set yet\n   * @category Key-Value Storage\n   */\n\n\n  get(name) {\n    var anyState = this.state;\n\n    if (this.currentContext && anyState._context && anyState._context[this.currentContext] && anyState._context[this.currentContext][name]) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return anyState._context[this.currentContext][name];\n    } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    return this.state.settings[name];\n  }\n  /**\n   * Set a value in your key-value storage. This action does not mutate your state but returns an action\n   * to be dispatched.\n   *\n   * @param name The key to update.\n   * @param value The value to set for this key.\n   * @returns {SettingsUpdateAction} Send this value to your dispatch function.\n   * @category Key-Value Storage\n   */\n\n\n  set(name, value) {\n    return {\n      type: 'SETTINGS_UPDATE',\n      payload: {\n        context: this.currentContext,\n        key: name,\n        setting: value\n      }\n    };\n  }\n  /**\n   * Retrieve an immutable table by name. If you plan to compose a complex query, use [[`query`]] instead.\n   *\n   * ```ts\n   * const things = db.table('things');\n   * things.first\n   * ```\n   *\n   * @param {K} type The name of the table to retrieve\n   * @returns {Table<RowType<State, K>>} An immutable [[`Table`]] instance.\n   * @category Table Storage\n   */\n\n\n  table(type) {\n    var contextChanges = this.currentContext ? this.changeSetsOfContext(type, this.currentContext) : undefined;\n    return new Table(this.state.data[type], type, {\n      context: this.currentContext,\n      contextChanges // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    });\n  }\n  /**\n   * Start a composable query. Queries allow chaining together different queries, joins and transformations.\n   *\n   * ```ts\n   * const things = db.query('things').where({name: 'tool'}).embed('user', 'users', 'userId).order({name: 'desc'}).all;\n   * ```\n   *\n   * @param {Key} type Name of the table to start the query on.\n   * @returns {Query<State, Key, RowType<State, Key>>}\n   * @category Table Storage\n   */\n\n\n  query(type) {\n    return new Query(this, this.table(type));\n  }\n  /**\n   * Access a named context.\n   *\n   * ```ts\n   * const draftDB = db.context('draft');\n   * store.dispatch(draftDB.table('things').update('1', { name: 'Updated Thing' }));\n   * // retrieve your state again from the store\n   * db.table('things').first.name; // this is still 'First Thing'\n   * draftDB.table('things').first.name; // this is updated to 'Updated Thing'\n   * ```\n   *\n   * @param {string} context\n   * @returns {DB<State>}\n   * @category Context\n   */\n\n\n  context(context) {\n    var {\n      currentContext\n    } = this;\n\n    if (currentContext) {\n      context = currentContext + '.' + context;\n    }\n\n    return new DB(this.state, {\n      context\n    });\n  }\n  /**\n   * Start a transaction to group updates. This is mostly used to prevent rerenders if you're planning\n   * to update multiple values and tables.\n   *\n   * ```ts\n   * store.dispatch(\n   *   db.transaction(dispatch => {\n   *     dispatch(things.insert({ name: 'First Thing' }));\n   *     dispatch(things.insert({ name: 'Second Thing' }));\n   *   })\n   * );\n   * ```\n   *\n   * @param {(dispatch: DBDispatch) => void} execute Your execution function\n   * @returns {TransactionAction} The action that you should send to your reducer.\n   * @category Transactions\n   */\n\n\n  transaction(execute) {\n    var actions = [];\n    execute(action => actions.push(action));\n    return {\n      type: 'TRANSACTION',\n      payload: {\n        actions\n      }\n    };\n  }\n  /**\n   * Commit changes in a context to its parent. You can either commit individual ids, full tables\n   * or the whole context.\n   *\n   * @param {K} [table] required if row-ids are given\n   * @param {RowIdentififying} [ids]\n   * @returns {CommitContextAction}\n   * @category Context\n   */\n\n\n  commit(table, ids) {\n    var {\n      currentContext\n    } = this;\n\n    if (!currentContext) {\n      throw new Error('Called commit on a root context.');\n    }\n\n    return {\n      type: 'COMMIT_CONTEXT',\n      payload: {\n        context: currentContext,\n        table,\n        ids: ids ? extractIds(ids) : undefined\n      }\n    };\n  }\n  /**\n   * Revert changes in a context. You can either revert individual ids, full tables\n   * or the whole context.\n   *\n   * @param {K} [table] required if ids are given\n   * @param {RowIdentififying} [ids]\n   * @returns {RevertContextAction}\n   * @category Context\n   */\n\n\n  revert(table, ids) {\n    var {\n      currentContext\n    } = this;\n\n    if (!currentContext) {\n      throw new Error('Called commit on a root context.');\n    }\n\n    return {\n      type: 'REVERT_CONTEXT',\n      payload: {\n        context: currentContext,\n        table,\n        ids: ids ? extractIds(ids) : undefined\n      }\n    };\n  }\n  /**\n   * Truncates all tables. After this action, all tables are empty. This will not change settings.\n   * If you would like to reset settings instead, use [[reset]].\n   *\n   * @category Reset\n   */\n\n\n  truncate() {\n    return {\n      type: 'TRUNCATE',\n      payload: {\n        type: 'database'\n      }\n    };\n  }\n  /**\n   * Resets the given type back to the initial state. If you want to have empty tables, use\n   * [[truncate]] instead.\n   *\n   * - `all`: Reset settings and tables back to initial state.\n   * - `tables`: Reset tables, but keeps current settings.\n   * - `settings`: Reset settings, but keeps all tables.\n   *\n   * @category Reset\n   */\n\n\n  reset() {\n    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'all';\n    return {\n      type: 'RESET',\n      payload: {\n        type: type\n      }\n    };\n  }\n\n  changeSetsOfContext(table, context) {\n    var anyState = this.state;\n\n    if (!context) {\n      return [];\n    }\n\n    if (!anyState._context || !anyState._context[context] || !anyState._context[context][table]) {\n      return this.changeSetsOfContext(table, extractParentContext(context));\n    }\n\n    return [...this.changeSetsOfContext(table, extractParentContext(context)), anyState._context[context][table]];\n  }\n\n}\n\nclass MutableTable {\n  constructor(table, dispatch) {\n    this.underlyingTable = table;\n    this.dispatch = dispatch;\n  }\n\n  find(id) {\n    return this.underlyingTable.find(id);\n  }\n\n  get all() {\n    return this.underlyingTable.all;\n  }\n\n  get first() {\n    return this.underlyingTable.first;\n  }\n\n  get last() {\n    return this.underlyingTable.last;\n  }\n\n  get changes() {\n    return this.underlyingTable.changes;\n  }\n\n  get ids() {\n    return this.underlyingTable.ids;\n  }\n\n  get length() {\n    return this.ids.length;\n  }\n\n  changesFor(id) {\n    return this.underlyingTable.changesFor(id);\n  }\n\n  where(query) {\n    return this.underlyingTable.where(query);\n  }\n\n  insert(records) {\n    this.dispatch(this.underlyingTable.insert(records));\n  }\n\n  upsert(records) {\n    this.dispatch(this.underlyingTable.upsert(records));\n  }\n\n  update(id, values) {\n    this.dispatch(this.underlyingTable.update(id, values));\n  }\n\n  delete(id) {\n    this.dispatch(this.underlyingTable.delete(id));\n  }\n\n  commit(ids) {\n    this.dispatch(this.underlyingTable.commit(ids));\n  }\n\n  revert(ids) {\n    this.dispatch(this.underlyingTable.revert(ids));\n  }\n\n  truncate() {\n    this.dispatch(this.underlyingTable.truncate());\n  }\n\n}\n\nfunction applyInContext(state, context, field, handler) {\n  var contextContent = state._context || {};\n  var changes = contextContent[context] && contextContent[context][field] || {\n    byId: {},\n    deletedIds: [],\n    newIds: []\n  };\n  changes = handler(changes);\n  var currentContext = contextContent[context] || {};\n  return _objectSpread2(_objectSpread2({}, state), {}, {\n    _context: _objectSpread2(_objectSpread2({}, contextContent), {}, {\n      [context]: _objectSpread2(_objectSpread2({}, currentContext), {}, {\n        [field]: _objectSpread2(_objectSpread2({}, currentContext[field]), changes)\n      })\n    })\n  });\n}\n\nfunction reduce(state, action, options) {\n  var {\n    initialState\n  } = options;\n\n  switch (action.type) {\n    case 'INSERT_RECORD':\n      {\n        var key = action.payload.key;\n        var newIDs = action.payload.ids.filter(id => !state.data[key].ids.includes(id));\n\n        if (action.payload.context) {\n          state = applyInContext(state, action.payload.context, key, changes => {\n            return _objectSpread2(_objectSpread2({}, changes), {}, {\n              newIds: [...changes.newIds, ...newIDs],\n              byId: _objectSpread2(_objectSpread2({}, changes.byId), byId(action.payload.data))\n            });\n          });\n        } else {\n          var dataSet = _objectSpread2(_objectSpread2({}, state.data[key]), {}, {\n            byId: _objectSpread2(_objectSpread2({}, state.data[key].byId), byId(action.payload.data)),\n            ids: [...state.data[key].ids, ...newIDs]\n          });\n\n          state = _objectSpread2(_objectSpread2({}, state), {}, {\n            data: _objectSpread2(_objectSpread2({}, state.data), {}, {\n              [key]: dataSet\n            })\n          });\n        }\n\n        break;\n      }\n\n    case 'UPSERT_RECORD':\n      {\n        var _key = action.payload.key;\n        var currentIds = new Set(state.data[_key].ids);\n        var context = action.payload.context;\n        var newRecords = action.payload.data.filter(e => !currentIds.has(e.id));\n        var existingRecords = action.payload.data.filter(e => currentIds.has(e.id));\n        state = reduce(state, {\n          type: 'INSERT_RECORD',\n          payload: {\n            ids: newRecords.map(e => e.id),\n            key: _key,\n            context,\n            data: newRecords\n          }\n        }, options);\n\n        for (var record of existingRecords) {\n          state = reduce(state, {\n            type: 'UPDATE_RECORD',\n            payload: {\n              ids: [record.id],\n              key: _key,\n              context,\n              data: record\n            }\n          }, options);\n        }\n\n        break;\n      }\n\n    case 'DELETE_RECORD':\n      {\n        var _key2 = action.payload.key;\n        var ids = action.payload.ids;\n\n        if (action.payload.context) {\n          state = applyInContext(state, action.payload.context, _key2, changes => {\n            return _objectSpread2(_objectSpread2({}, changes), {}, {\n              deletedIds: [...changes.deletedIds, ...ids]\n            });\n          });\n        } else {\n          var _dataSet = _objectSpread2(_objectSpread2({}, state.data[_key2]), {}, {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            byId: except(state.data[_key2].byId, ids),\n            ids: state.data[_key2].ids.filter(e => !ids.includes(e))\n          });\n\n          state = _objectSpread2(_objectSpread2({}, state), {}, {\n            data: _objectSpread2(_objectSpread2({}, state.data), {}, {\n              [_key2]: _dataSet\n            })\n          });\n        }\n\n        break;\n      }\n\n    case 'UPDATE_RECORD':\n      {\n        var _key3 = action.payload.key;\n\n        if (action.payload.context) {\n          state = applyInContext(state, action.payload.context, _key3, changes => {\n            var updates = {};\n            action.payload.ids.forEach(e => updates[e] = _objectSpread2(_objectSpread2({}, changes.byId[e]), action.payload.data));\n            return _objectSpread2(_objectSpread2({}, changes), {}, {\n              byId: _objectSpread2(_objectSpread2({}, changes.byId), updates)\n            });\n          });\n        } else {\n          var updatedId = action.payload.data['id'];\n          var updates = {};\n          action.payload.ids.forEach(e => updates[updatedId || e] = _objectSpread2(_objectSpread2({}, state.data[_key3].byId[e]), action.payload.data));\n\n          var _dataSet2 = _objectSpread2(_objectSpread2({}, state.data[_key3]), {}, {\n            byId: _objectSpread2(_objectSpread2({}, state.data[_key3].byId), updates)\n          });\n\n          if (updatedId !== undefined) {\n            action.payload.ids.forEach(id => {\n              if (id === updatedId) {\n                return;\n              }\n\n              delete _dataSet2.byId[id];\n            });\n            _dataSet2.ids = _dataSet2.ids.map(e => action.payload.ids.includes(e) ? updatedId : e);\n          }\n\n          state = _objectSpread2(_objectSpread2({}, state), {}, {\n            data: _objectSpread2(_objectSpread2({}, state.data), {}, {\n              [_key3]: _dataSet2\n            })\n          });\n        }\n\n        break;\n      }\n\n    case 'TRUNCATE':\n      {\n        switch (action.payload.type) {\n          case 'table':\n            state = _objectSpread2(_objectSpread2({}, state), {}, {\n              data: _objectSpread2(_objectSpread2({}, state.data), {}, {\n                [action.payload.key]: _objectSpread2({}, emptyTable)\n              })\n            });\n            break;\n\n          case 'database':\n            {\n              var tables = Object.keys(state.data);\n              state = _objectSpread2(_objectSpread2({}, state), {}, {\n                data: {}\n              });\n\n              for (var _table of tables) {\n                state.data[_table] = _objectSpread2({}, emptyTable);\n              }\n            }\n        }\n\n        break;\n      }\n\n    case 'RESET':\n      {\n        switch (action.payload.type) {\n          case 'all':\n            state = initialState;\n            break;\n\n          case 'table':\n            state = _objectSpread2(_objectSpread2({}, state), {}, {\n              data: _objectSpread2(_objectSpread2({}, state.data), {}, {\n                [action.payload.key]: _objectSpread2({}, initialState.data[action.payload.key])\n              })\n            });\n            break;\n\n          case 'tables':\n            state = _objectSpread2(_objectSpread2({}, state), {}, {\n              data: initialState.data\n            });\n            break;\n\n          case 'settings':\n            state = _objectSpread2(_objectSpread2({}, state), {}, {\n              settings: initialState.settings\n            });\n            break;\n        }\n\n        break;\n      }\n\n    case 'SETTINGS_UPDATE':\n      {\n        var _key4 = action.payload.key;\n\n        if (action.payload.context) {\n          var contextState = state;\n\n          var _context = contextState._context || {};\n\n          var currentContext = _context[action.payload.context] || {};\n          state = _objectSpread2(_objectSpread2({}, state), {}, {\n            _context: _objectSpread2(_objectSpread2({}, _context), {}, {\n              [action.payload.context]: currentContext\n            })\n          });\n        } else {\n          state = _objectSpread2(_objectSpread2({}, state), {}, {\n            settings: _objectSpread2(_objectSpread2({}, state.settings), {}, {\n              [_key4]: action.payload.setting\n            })\n          });\n        }\n\n        break;\n      }\n\n    case 'COMMIT_CONTEXT':\n      {\n        var _context2 = action.payload.context;\n        var tableToMerge = action.payload.table;\n        var idsToMerge = action.payload.ids;\n        var _contextState = state;\n        var revertedState = reduce(state, {\n          type: 'REVERT_CONTEXT',\n          payload: {\n            context: _context2,\n            table: tableToMerge,\n            ids: idsToMerge\n          }\n        }, options);\n        var parentContext = extractParentContext(_context2);\n        var changes = _contextState._context && _contextState._context[_context2] || {};\n\n        if (parentContext) {\n          var parentContextChanges = _objectSpread2({}, _contextState._context[parentContext]);\n\n          Object.keys(changes).forEach(table => {\n            if (tableToMerge && tableToMerge !== table) {\n              return;\n            }\n\n            var change = changes[table];\n\n            if (!parentContextChanges[table]) {\n              Object.assign(parentContextChanges, {\n                [table]: {\n                  byId: {},\n                  newIds: [],\n                  deletedIds: []\n                }\n              });\n            }\n\n            var parentChange = parentContextChanges[table];\n            parentChange.newIds = [...parentChange.newIds, ...change.newIds.filter(e => !idsToMerge || idsToMerge.includes(e))];\n            parentChange.deletedIds = [...parentChange.deletedIds, ...change.deletedIds];\n            Object.keys(change.byId).forEach(id => {\n              if (idsToMerge && !idsToMerge.includes(id)) {\n                return;\n              }\n\n              parentChange.byId[id] = _objectSpread2(_objectSpread2({}, parentChange.byId[id]), change.byId[id]);\n            });\n          });\n          state = _objectSpread2(_objectSpread2({}, state), {}, {\n            _context: _objectSpread2(_objectSpread2({}, revertedState._context), {}, {\n              [parentContext]: parentContextChanges\n            })\n          });\n        } else {\n          state = _objectSpread2(_objectSpread2({}, state), {}, {\n            data: _objectSpread2({}, state.data),\n            // create a new object so it's ok to modify it later\n            _context: revertedState._context\n          });\n          Object.keys(changes).forEach(table => {\n            if (tableToMerge && tableToMerge !== table) {\n              return;\n            }\n\n            var change = changes[table];\n            var data = state.data[table];\n            state.data[table] = {\n              ids: data.ids.concat(change.newIds.filter(id => !idsToMerge || idsToMerge.includes(id))).filter(id => !change.deletedIds.includes(id)),\n              byId: _objectSpread2({}, data.byId)\n            };\n            Object.keys(change.byId).forEach(id => {\n              if (idsToMerge && !idsToMerge.includes(id)) {\n                return;\n              }\n\n              state.data[table].byId[id] = _objectSpread2(_objectSpread2({}, state.data[table].byId[id]), change.byId[id]);\n            });\n          });\n        }\n\n        break;\n      }\n\n    case 'REVERT_CONTEXT':\n      {\n        var _contextState2 = state;\n        var _context3 = action.payload.context;\n\n        var _changes = _contextState2._context && _contextState2._context[_context3] || {};\n\n        var tableToRevert = action.payload.table;\n        var idsToRevert = action.payload.ids;\n        var contextUpdates;\n\n        if (tableToRevert) {\n          contextUpdates = _objectSpread2({}, _changes);\n\n          if (idsToRevert) {\n            var contextTableChange = contextUpdates[tableToRevert];\n            var tableChanges = {};\n            Object.keys(contextTableChange.byId).forEach(id => {\n              if (idsToRevert.includes(id)) {\n                return;\n              }\n\n              tableChanges[id] = contextTableChange.byId[id];\n            });\n            contextUpdates[tableToRevert] = {\n              byId: tableChanges,\n              deletedIds: contextTableChange.deletedIds.filter(id => !idsToRevert.includes(id)),\n              newIds: contextTableChange.newIds.filter(id => !idsToRevert.includes(id))\n            };\n          } else {\n            delete contextUpdates[tableToRevert];\n          }\n        }\n\n        state = _objectSpread2(_objectSpread2({}, state), {}, {\n          _context: _objectSpread2(_objectSpread2({}, _contextState2._context), {}, {\n            [_context3]: contextUpdates\n          })\n        });\n        break;\n      }\n\n    case 'TRANSACTION':\n      {\n        action.payload.actions.forEach(a => {\n          state = reduce(state, a, options);\n        });\n        break;\n      }\n  }\n\n  return state;\n}\nfunction reducer(initialState) {\n  return (state, action) => {\n    if (!state) {\n      state = initialState;\n    }\n\n    return reduce(state, action, {\n      initialState\n    });\n  };\n}\n\nclass Subscription {\n  constructor(db, query) {\n    this.db = db;\n    this._query = query;\n    this.subscribers = [];\n    this._current = query(db.snapshot);\n    this.unsubscribe = db.subscribe(() => this.trigger());\n  }\n\n  get query() {\n    return this._query;\n  }\n\n  set query(query) {\n    // when assigning the same instance of query, skip notifications (this happens e.g. in React\n    // when assining a query on each render)\n    if (this._query !== query) {\n      this._query = query;\n      this.trigger();\n    }\n  }\n\n  get current() {\n    return this._current;\n  }\n\n  subscribe(callback) {\n    this.subscribers.push(callback);\n    callback(this._current);\n    return () => {\n      removeByValue(this.subscribers, callback);\n    };\n  }\n\n  cancel() {\n    this.unsubscribe();\n    this.subscribers = [];\n  }\n\n  trigger() {\n    var newValue = this._query(this.db.snapshot);\n\n    if (!deepEqual(this.current, newValue)) {\n      this._current = newValue;\n      this.subscribers.forEach(e => e(newValue));\n    }\n  }\n\n}\n\nclass MutableDB {\n  constructor(state) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.state = state;\n    this.currentContext = options.context;\n    this.store = options.store;\n    this.reducer = reducer(this.state);\n    this.subscribers = [];\n    this.cachedTables = {};\n\n    if (options.store) {\n      options.store.subscribe(() => {\n        this.readState(this.store.getState());\n      });\n    }\n  }\n\n  get snapshot() {\n    return new DB(this.state, {\n      context: this.currentContext\n    });\n  }\n\n  get(name) {\n    return this.snapshot.get(name);\n  }\n\n  set(name, value) {\n    this.dispatch(this.snapshot.set(name, value));\n  }\n\n  table(type) {\n    if (this.cachedTables[type]) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return this.cachedTables[type];\n    } else {\n      this.cachedTables[type] = new MutableTable(this.snapshot.table(type), this.dispatch.bind(this) // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      );\n    } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    return this.cachedTables[type];\n  }\n\n  query(type) {\n    var db = this.snapshot;\n    return new Query(db, db.table(type));\n  }\n\n  context(context) {\n    return new MutableDB(this.state, {\n      context,\n      store: this.store\n    });\n  }\n\n  transaction(execute) {\n    this.dispatch(this.snapshot.transaction(dispatch => execute(this.snapshot, dispatch)));\n  }\n\n  commit(table, ids) {\n    this.dispatch(this.snapshot.commit(table, ids));\n  }\n\n  revert(table, ids) {\n    this.dispatch(this.snapshot.revert(table, ids));\n  }\n\n  truncate() {\n    this.dispatch(this.snapshot.truncate());\n  }\n\n  reset() {\n    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'all';\n    this.dispatch(this.snapshot.reset(type));\n  }\n\n  subscribe(callback) {\n    this.subscribers.push(callback);\n    return () => {\n      removeByValue(this.subscribers, callback);\n    };\n  }\n\n  observe(query) {\n    return new Subscription(this, query);\n  }\n\n  dispatch(action) {\n    if (this.store) {\n      this.store.dispatch(action);\n    } else {\n      this.readState(this.reducer(this.state, action));\n    }\n\n    this.subscribers.forEach(e => e(action));\n  }\n\n  readState(state) {\n    this.state = state;\n    Object.keys(this.cachedTables).forEach(type => {\n      var table = this.cachedTables[type];\n\n      if (!table) {\n        return;\n      }\n\n      table.underlyingTable['data'] = state.data[type];\n      table.underlyingTable['contextChanges'] = this.snapshot.table(type)['contextChanges'];\n    });\n  }\n\n}\n\nexport { DB, MutableDB, Query, Subscription, emptyTable, guid, reducer };\n"],
  "mappings": "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",
  "names": ["byId", "order", "changes", "updates"]
}
